<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Voro++: rad_option.hh Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voro++
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">rad_option.hh</div>  </div>
</div>
<div class="contents">
<a href="rad__option_8hh.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Voro++, a 3D cell-based Voronoi library</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// Author   : Chris H. Rycroft (LBL / UC Berkeley)</span>
<a name="l00004"></a>00004 <span class="comment">// Email    : chr@alum.mit.edu</span>
<a name="l00005"></a>00005 <span class="comment">// Date     : August 30th 2011</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">/** \file rad_option.hh</span>
<a name="l00008"></a>00008 <span class="comment"> * \brief Header file for the classes encapsulating functionality for the</span>
<a name="l00009"></a>00009 <span class="comment"> * regular and radical Voronoi tessellations. */</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="preprocessor">#ifndef VOROPP_RAD_OPTION_HH</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span><span class="preprocessor">#define VOROPP_RAD_OPTION_HH</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span>
<a name="l00014"></a>00014 <span class="keyword">namespace </span>voro {
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">/** \brief Class containing all of the routines that are specific to computing </span>
<a name="l00017"></a>00017 <span class="comment"> * the regular Voronoi tessellation.</span>
<a name="l00018"></a>00018 <span class="comment"> *</span>
<a name="l00019"></a>00019 <span class="comment"> * The container and container_periodic classes are derived from this class,</span>
<a name="l00020"></a>00020 <span class="comment"> * and during the Voronoi cell computation, these routines are used to create</span>
<a name="l00021"></a>00021 <span class="comment"> * the regular Voronoi tessellation. */</span>
<a name="l00022"></a><a class="code" href="classvoro_1_1radius__mono.html">00022</a> <span class="keyword">class </span><a class="code" href="classvoro_1_1radius__mono.html" title="Class containing all of the routines that are specific to computing the regular Voronoi tessellation...">radius_mono</a> {
<a name="l00023"></a>00023         <span class="keyword">protected</span>:<span class="comment"></span>
<a name="l00024"></a>00024 <span class="comment">                /** This is called prior to computing a Voronoi cell for a</span>
<a name="l00025"></a>00025 <span class="comment">                 * given particle to initialize any required constants.</span>
<a name="l00026"></a>00026 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00027"></a>00027 <span class="comment">                 * \param[in] s the index of the particle within the block. */</span>
<a name="l00028"></a><a class="code" href="classvoro_1_1radius__mono.html#ab17c87e1f434718bec74e93387480be9">00028</a>                 <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classvoro_1_1radius__mono.html#ab17c87e1f434718bec74e93387480be9">r_init</a>(<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> s) {}<span class="comment"></span>
<a name="l00029"></a>00029 <span class="comment">                /** Sets a required constant to be used when carrying out a</span>
<a name="l00030"></a>00030 <span class="comment">                 * plane bounds check. */</span>
<a name="l00031"></a><a class="code" href="classvoro_1_1radius__mono.html#afc6e56b490ddf97d9ee924d58e128422">00031</a>                 <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classvoro_1_1radius__mono.html#afc6e56b490ddf97d9ee924d58e128422">r_prime</a>(<span class="keywordtype">double</span> rv) {}<span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">                /** Carries out a radius bounds check.</span>
<a name="l00033"></a>00033 <span class="comment">                 * \param[in] crs the radius squared to be tested.</span>
<a name="l00034"></a>00034 <span class="comment">                 * \param[in] mrs the current maximum distance to a Voronoi</span>
<a name="l00035"></a>00035 <span class="comment">                 *                vertex multiplied by two.</span>
<a name="l00036"></a>00036 <span class="comment">                 * \return True if particles at this radius could not possibly</span>
<a name="l00037"></a>00037 <span class="comment">                 * cut the cell, false otherwise. */</span>
<a name="l00038"></a><a class="code" href="classvoro_1_1radius__mono.html#a685b7e6b79c943b4fd083857b229cc14">00038</a>                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classvoro_1_1radius__mono.html#a685b7e6b79c943b4fd083857b229cc14">r_ctest</a>(<span class="keywordtype">double</span> crs,<span class="keywordtype">double</span> mrs) {<span class="keywordflow">return</span> crs&gt;mrs;}<span class="comment"></span>
<a name="l00039"></a>00039 <span class="comment">                /** Scales a plane displacement during a plane bounds check.</span>
<a name="l00040"></a>00040 <span class="comment">                 * \param[in] lrs the plane displacement.</span>
<a name="l00041"></a>00041 <span class="comment">                 * \return The scaled value. */</span>
<a name="l00042"></a><a class="code" href="classvoro_1_1radius__mono.html#a5eaff13d2c5212e72032d24a8c376114">00042</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__mono.html#a5eaff13d2c5212e72032d24a8c376114">r_cutoff</a>(<span class="keywordtype">double</span> lrs) {<span class="keywordflow">return</span> lrs;}<span class="comment"></span>
<a name="l00043"></a>00043 <span class="comment">                /** Adds the maximum radius squared to a given value.</span>
<a name="l00044"></a>00044 <span class="comment">                 * \param[in] rs the value to consider.</span>
<a name="l00045"></a>00045 <span class="comment">                 * \return The value with the radius squared added. */</span>
<a name="l00046"></a><a class="code" href="classvoro_1_1radius__mono.html#ab1b663f24d371a45e19fb8866151bb7f">00046</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__mono.html#ab1b663f24d371a45e19fb8866151bb7f">r_max_add</a>(<span class="keywordtype">double</span> rs) {<span class="keywordflow">return</span> rs;}<span class="comment"></span>
<a name="l00047"></a>00047 <span class="comment">                /** Subtracts the radius squared of a particle from a given </span>
<a name="l00048"></a>00048 <span class="comment">                 * value.</span>
<a name="l00049"></a>00049 <span class="comment">                 * \param[in] rs the value to consider.</span>
<a name="l00050"></a>00050 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00051"></a>00051 <span class="comment">                 * \param[in] q the index of the particle within the block. </span>
<a name="l00052"></a>00052 <span class="comment">                 * \return The value with the radius squared subtracted. */</span>
<a name="l00053"></a><a class="code" href="classvoro_1_1radius__mono.html#ae390a53c70f0295592d02fc9dd0a9086">00053</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__mono.html#ae390a53c70f0295592d02fc9dd0a9086">r_current_sub</a>(<span class="keywordtype">double</span> rs,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> q) {<span class="keywordflow">return</span> rs;}<span class="comment"></span>
<a name="l00054"></a>00054 <span class="comment">                /** Scales a plane displacement prior to use in the plane cutting</span>
<a name="l00055"></a>00055 <span class="comment">                 * algorithm.</span>
<a name="l00056"></a>00056 <span class="comment">                 * \param[in] rs the initial plane displacement.</span>
<a name="l00057"></a>00057 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00058"></a>00058 <span class="comment">                 * \param[in] q the index of the particle within the block.</span>
<a name="l00059"></a>00059 <span class="comment">                 * \return The scaled plane displacement. */</span> 
<a name="l00060"></a><a class="code" href="classvoro_1_1radius__mono.html#a4aa8de703ecce74dc1625aea73149720">00060</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__mono.html#a4aa8de703ecce74dc1625aea73149720">r_scale</a>(<span class="keywordtype">double</span> rs,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> q) {<span class="keywordflow">return</span> rs;}<span class="comment"></span>
<a name="l00061"></a>00061 <span class="comment">                /** Scales a plane displacement prior to use in the plane</span>
<a name="l00062"></a>00062 <span class="comment">                 * cutting algorithm, and also checks if it could possibly cut</span>
<a name="l00063"></a>00063 <span class="comment">                 * the cell.</span>
<a name="l00064"></a>00064 <span class="comment">                 * \param[in,out] rs the plane displacement to be scaled.</span>
<a name="l00065"></a>00065 <span class="comment">                 * \param[in] mrs the current maximum distance to a Voronoi</span>
<a name="l00066"></a>00066 <span class="comment">                 *                vertex multiplied by two.</span>
<a name="l00067"></a>00067 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00068"></a>00068 <span class="comment">                 * \param[in] q the index of the particle within the block.</span>
<a name="l00069"></a>00069 <span class="comment">                 * \return True if the cell could possibly cut the cell, false</span>
<a name="l00070"></a>00070 <span class="comment">                 * otherwise. */</span>                
<a name="l00071"></a><a class="code" href="classvoro_1_1radius__mono.html#aaadf553614ec9390a37349bc7d7a7557">00071</a>                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classvoro_1_1radius__mono.html#aaadf553614ec9390a37349bc7d7a7557">r_scale_check</a>(<span class="keywordtype">double</span> &amp;rs,<span class="keywordtype">double</span> mrs,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> q) {<span class="keywordflow">return</span> rs&lt;mrs;}
<a name="l00072"></a>00072 };
<a name="l00073"></a>00073 <span class="comment"></span>
<a name="l00074"></a>00074 <span class="comment">/**  \brief Class containing all of the routines that are specific to computing </span>
<a name="l00075"></a>00075 <span class="comment"> * the radical Voronoi tessellation.</span>
<a name="l00076"></a>00076 <span class="comment"> *</span>
<a name="l00077"></a>00077 <span class="comment"> * The container_poly and container_periodic_poly classes are derived from this</span>
<a name="l00078"></a>00078 <span class="comment"> * class, and during the Voronoi cell computation, these routines are used to</span>
<a name="l00079"></a>00079 <span class="comment"> * create the radical Voronoi tessellation. */</span>
<a name="l00080"></a><a class="code" href="classvoro_1_1radius__poly.html">00080</a> <span class="keyword">class </span><a class="code" href="classvoro_1_1radius__poly.html" title="Class containing all of the routines that are specific to computing the radical Voronoi tessellation...">radius_poly</a> {
<a name="l00081"></a>00081         <span class="keyword">public</span>:<span class="comment"></span>
<a name="l00082"></a>00082 <span class="comment">                /** A two-dimensional array holding particle positions and radii. */</span>                    
<a name="l00083"></a><a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">00083</a>                 <span class="keywordtype">double</span> **<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>;<span class="comment"></span>
<a name="l00084"></a>00084 <span class="comment">                /** The current maximum radius of any particle, used to</span>
<a name="l00085"></a>00085 <span class="comment">                 * determine when to cut off the radical Voronoi computation.</span>
<a name="l00086"></a>00086 <span class="comment">                 * */</span>
<a name="l00087"></a><a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">00087</a>                 <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">max_radius</a>;<span class="comment"></span>
<a name="l00088"></a>00088 <span class="comment">                /** The class constructor sets the maximum particle radius to</span>
<a name="l00089"></a>00089 <span class="comment">                 * be zero. */</span>
<a name="l00090"></a><a class="code" href="classvoro_1_1radius__poly.html#a54ca6935b6fe7eb28e924e5c2b0a2abd">00090</a>                 <a class="code" href="classvoro_1_1radius__poly.html#a54ca6935b6fe7eb28e924e5c2b0a2abd">radius_poly</a>() : <a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">max_radius</a>(0) {}
<a name="l00091"></a>00091         <span class="keyword">protected</span>:<span class="comment"></span>
<a name="l00092"></a>00092 <span class="comment">                /** This is called prior to computing a Voronoi cell for a</span>
<a name="l00093"></a>00093 <span class="comment">                 * given particle to initialize any required constants.</span>
<a name="l00094"></a>00094 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00095"></a>00095 <span class="comment">                 * \param[in] s the index of the particle within the block. */</span>
<a name="l00096"></a><a class="code" href="classvoro_1_1radius__poly.html#aa8dcd117e31007933a37454ef9ccb4d9">00096</a>                 <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classvoro_1_1radius__poly.html#aa8dcd117e31007933a37454ef9ccb4d9">r_init</a>(<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> s) {
<a name="l00097"></a>00097                         r_rad=<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*s+3]*<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*s+3];
<a name="l00098"></a>00098                         r_mul=r_rad-<a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">max_radius</a>*<a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">max_radius</a>;
<a name="l00099"></a>00099                 }<span class="comment"></span>
<a name="l00100"></a>00100 <span class="comment">                /** Sets a required constant to be used when carrying out a</span>
<a name="l00101"></a>00101 <span class="comment">                 * plane bounds check. */</span>
<a name="l00102"></a><a class="code" href="classvoro_1_1radius__poly.html#a19b9bc7dd97869e6ac440662912f4911">00102</a>                 <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classvoro_1_1radius__poly.html#a19b9bc7dd97869e6ac440662912f4911">r_prime</a>(<span class="keywordtype">double</span> rv) {r_val=1+r_mul/rv;}<span class="comment"></span>
<a name="l00103"></a>00103 <span class="comment">                /** Carries out a radius bounds check.</span>
<a name="l00104"></a>00104 <span class="comment">                 * \param[in] crs the radius squared to be tested.</span>
<a name="l00105"></a>00105 <span class="comment">                 * \param[in] mrs the current maximum distance to a Voronoi</span>
<a name="l00106"></a>00106 <span class="comment">                 *                vertex multiplied by two.</span>
<a name="l00107"></a>00107 <span class="comment">                 * \return True if particles at this radius could not possibly</span>
<a name="l00108"></a>00108 <span class="comment">                 * cut the cell, false otherwise. */</span>            
<a name="l00109"></a><a class="code" href="classvoro_1_1radius__poly.html#a5e74adfce3978911c901f0eb5dbb2c90">00109</a>                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classvoro_1_1radius__poly.html#a5e74adfce3978911c901f0eb5dbb2c90">r_ctest</a>(<span class="keywordtype">double</span> crs,<span class="keywordtype">double</span> mrs) {<span class="keywordflow">return</span> crs+r_mul&gt;sqrt(mrs*crs);}<span class="comment"></span>
<a name="l00110"></a>00110 <span class="comment">                /** Scales a plane displacement during a plane bounds check.</span>
<a name="l00111"></a>00111 <span class="comment">                 * \param[in] lrs the plane displacement.</span>
<a name="l00112"></a>00112 <span class="comment">                 * \return The scaled value. */</span>         
<a name="l00113"></a><a class="code" href="classvoro_1_1radius__poly.html#a33cecd36b74cc748fb91b5c9f60f08e9">00113</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__poly.html#a33cecd36b74cc748fb91b5c9f60f08e9">r_cutoff</a>(<span class="keywordtype">double</span> lrs) {<span class="keywordflow">return</span> lrs*r_val;}<span class="comment"></span>
<a name="l00114"></a>00114 <span class="comment">                /** Adds the maximum radius squared to a given value.</span>
<a name="l00115"></a>00115 <span class="comment">                 * \param[in] rs the value to consider.</span>
<a name="l00116"></a>00116 <span class="comment">                 * \return The value with the radius squared added. */</span>          
<a name="l00117"></a><a class="code" href="classvoro_1_1radius__poly.html#a86eda87db1ab281a251e43236bbc26c1">00117</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__poly.html#a86eda87db1ab281a251e43236bbc26c1">r_max_add</a>(<span class="keywordtype">double</span> rs) {<span class="keywordflow">return</span> rs+<a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">max_radius</a>*<a class="code" href="classvoro_1_1radius__poly.html#a9faed3ac8ef95c646e376a7fe915fb0b">max_radius</a>;}<span class="comment"></span>
<a name="l00118"></a>00118 <span class="comment">                /** Subtracts the radius squared of a particle from a given </span>
<a name="l00119"></a>00119 <span class="comment">                 * value.</span>
<a name="l00120"></a>00120 <span class="comment">                 * \param[in] rs the value to consider.</span>
<a name="l00121"></a>00121 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00122"></a>00122 <span class="comment">                 * \param[in] q the index of the particle within the block. </span>
<a name="l00123"></a>00123 <span class="comment">                 * \return The value with the radius squared subtracted. */</span>
<a name="l00124"></a><a class="code" href="classvoro_1_1radius__poly.html#ab9a81c60cf27739db39faa28591d5650">00124</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__poly.html#ab9a81c60cf27739db39faa28591d5650">r_current_sub</a>(<span class="keywordtype">double</span> rs,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> q) {
<a name="l00125"></a>00125                         <span class="keywordflow">return</span> rs-<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*q+3]*<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*q+3];
<a name="l00126"></a>00126                 }<span class="comment"></span>
<a name="l00127"></a>00127 <span class="comment">                /** Scales a plane displacement prior to use in the plane cutting</span>
<a name="l00128"></a>00128 <span class="comment">                 * algorithm.</span>
<a name="l00129"></a>00129 <span class="comment">                 * \param[in] rs the initial plane displacement.</span>
<a name="l00130"></a>00130 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00131"></a>00131 <span class="comment">                 * \param[in] q the index of the particle within the block.</span>
<a name="l00132"></a>00132 <span class="comment">                 * \return The scaled plane displacement. */</span> 
<a name="l00133"></a><a class="code" href="classvoro_1_1radius__poly.html#a8357f4c9d6e20d739029dcb76705e316">00133</a>                 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1radius__poly.html#a8357f4c9d6e20d739029dcb76705e316">r_scale</a>(<span class="keywordtype">double</span> rs,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> q) {
<a name="l00134"></a>00134                         <span class="keywordflow">return</span> rs+r_rad-<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*q+3]*<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*q+3];
<a name="l00135"></a>00135                 }<span class="comment"></span>
<a name="l00136"></a>00136 <span class="comment">                /** Scales a plane displacement prior to use in the plane</span>
<a name="l00137"></a>00137 <span class="comment">                 * cutting algorithm, and also checks if it could possibly cut</span>
<a name="l00138"></a>00138 <span class="comment">                 * the cell.</span>
<a name="l00139"></a>00139 <span class="comment">                 * \param[in,out] rs the plane displacement to be scaled.</span>
<a name="l00140"></a>00140 <span class="comment">                 * \param[in] mrs the current maximum distance to a Voronoi</span>
<a name="l00141"></a>00141 <span class="comment">                 *                vertex multiplied by two.</span>
<a name="l00142"></a>00142 <span class="comment">                 * \param[in] ijk the block that the particle is within.</span>
<a name="l00143"></a>00143 <span class="comment">                 * \param[in] q the index of the particle within the block.</span>
<a name="l00144"></a>00144 <span class="comment">                 * \return True if the cell could possibly cut the cell, false</span>
<a name="l00145"></a>00145 <span class="comment">                 * otherwise. */</span>
<a name="l00146"></a><a class="code" href="classvoro_1_1radius__poly.html#aba9f2a8086de090f84f714510e6914fb">00146</a>                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classvoro_1_1radius__poly.html#aba9f2a8086de090f84f714510e6914fb">r_scale_check</a>(<span class="keywordtype">double</span> &amp;rs,<span class="keywordtype">double</span> mrs,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> q) {
<a name="l00147"></a>00147                         <span class="keywordtype">double</span> trs=rs;
<a name="l00148"></a>00148                         rs+=r_rad-<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*q+3]*<a class="code" href="classvoro_1_1radius__poly.html#a9e40455c336c27b089c5a78ca94626d8">ppr</a>[ijk][4*q+3];
<a name="l00149"></a>00149                         <span class="keywordflow">return</span> rs&lt;sqrt(mrs*trs);
<a name="l00150"></a>00150                 }
<a name="l00151"></a>00151         <span class="keyword">private</span>:
<a name="l00152"></a>00152                 <span class="keywordtype">double</span> r_rad,r_mul,r_val;
<a name="l00153"></a>00153 };
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>


<hr class="footer"/><address class="footer"><small>
Generated on Tue Jan 17 2012 09:19:58 for Voro++ by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
