<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Voro++: v_compute.hh Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voro++
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">v_compute.hh</div>  </div>
</div>
<div class="contents">
<a href="v__compute_8hh.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Voro++, a 3D cell-based Voronoi library</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// Author   : Chris H. Rycroft (LBL / UC Berkeley)</span>
<a name="l00004"></a>00004 <span class="comment">// Email    : chr@alum.mit.edu</span>
<a name="l00005"></a>00005 <span class="comment">// Date     : August 30th 2011</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">/** \file v_compute.hh</span>
<a name="l00008"></a>00008 <span class="comment"> * \brief Header file for the voro_compute template and related classes. */</span>
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 <span class="preprocessor">#ifndef VOROPP_V_COMPUTE_HH</span>
<a name="l00011"></a>00011 <span class="preprocessor"></span><span class="preprocessor">#define VOROPP_V_COMPUTE_HH</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;cstdio&gt;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00017"></a>00017 <span class="keyword">using namespace </span>std;
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;<a class="code" href="config_8hh.html" title="Master configuration file for setting various compile-time options.">config.hh</a>&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;<a class="code" href="worklist_8hh.html" title="Header file for setting constants used in the block worklists that are used during cell computation...">worklist.hh</a>&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;<a class="code" href="cell_8hh.html" title="Header file for the voronoicell and related classes.">cell.hh</a>&quot;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="keyword">namespace </span>voro {
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="comment">/** \brief Structure for holding information about a particle.</span>
<a name="l00026"></a>00026 <span class="comment"> *</span>
<a name="l00027"></a>00027 <span class="comment"> * This small structure holds information about a single particle, and is used</span>
<a name="l00028"></a>00028 <span class="comment"> * by several of the routines in the voro_compute template for passing</span>
<a name="l00029"></a>00029 <span class="comment"> * information by reference between functions. */</span>
<a name="l00030"></a><a class="code" href="structvoro_1_1particle__record.html">00030</a> <span class="keyword">struct </span><a class="code" href="structvoro_1_1particle__record.html" title="Structure for holding information about a particle.">particle_record</a> {<span class="comment"></span>
<a name="l00031"></a>00031 <span class="comment">        /** The index of the block that the particle is within. */</span>
<a name="l00032"></a><a class="code" href="structvoro_1_1particle__record.html#ac65fa5fc929dda2dd454369eab68ef8b">00032</a>         <span class="keywordtype">int</span> <a class="code" href="structvoro_1_1particle__record.html#ac65fa5fc929dda2dd454369eab68ef8b">ijk</a>;<span class="comment"></span>
<a name="l00033"></a>00033 <span class="comment">        /** The number of particle within its block. */</span>
<a name="l00034"></a><a class="code" href="structvoro_1_1particle__record.html#a5faf0f540ad3ee3ffcee5cae5a8b20fc">00034</a>         <span class="keywordtype">int</span> <a class="code" href="structvoro_1_1particle__record.html#a5faf0f540ad3ee3ffcee5cae5a8b20fc">l</a>;<span class="comment"></span>
<a name="l00035"></a>00035 <span class="comment">        /** The x-index of the block. */</span>
<a name="l00036"></a><a class="code" href="structvoro_1_1particle__record.html#a36ea6a17eb9dc145a3e5f14720b30d15">00036</a>         <span class="keywordtype">int</span> <a class="code" href="structvoro_1_1particle__record.html#a36ea6a17eb9dc145a3e5f14720b30d15">di</a>;<span class="comment"></span>
<a name="l00037"></a>00037 <span class="comment">        /** The y-index of the block. */</span>
<a name="l00038"></a><a class="code" href="structvoro_1_1particle__record.html#a25c3b01e32ccdb6bb37e279f14899bab">00038</a>         <span class="keywordtype">int</span> <a class="code" href="structvoro_1_1particle__record.html#a25c3b01e32ccdb6bb37e279f14899bab">dj</a>;<span class="comment"></span>
<a name="l00039"></a>00039 <span class="comment">        /** The z-index of the block. */</span>
<a name="l00040"></a><a class="code" href="structvoro_1_1particle__record.html#a56e78394cc8a114cedf353a2d54c0077">00040</a>         <span class="keywordtype">int</span> <a class="code" href="structvoro_1_1particle__record.html#a56e78394cc8a114cedf353a2d54c0077">dk</a>;
<a name="l00041"></a>00041 };
<a name="l00042"></a>00042 <span class="comment"></span>
<a name="l00043"></a>00043 <span class="comment">/** \brief Template for carrying out Voronoi cell computations. */</span>
<a name="l00044"></a>00044 <span class="keyword">template</span> &lt;<span class="keyword">class</span> c_<span class="keyword">class</span>&gt;
<a name="l00045"></a><a class="code" href="classvoro_1_1voro__compute.html">00045</a> <span class="keyword">class </span><a class="code" href="classvoro_1_1voro__compute.html" title="Template for carrying out Voronoi cell computations.">voro_compute</a> {
<a name="l00046"></a>00046         <span class="keyword">public</span>:<span class="comment"></span>
<a name="l00047"></a>00047 <span class="comment">                /** A reference to the container class on which to carry out*/</span>
<a name="l00048"></a><a class="code" href="classvoro_1_1voro__compute.html#a64cc1ec4cea792c438c3767918e265c9">00048</a>                 c_class &amp;<a class="code" href="classvoro_1_1voro__compute.html#a64cc1ec4cea792c438c3767918e265c9">con</a>;<span class="comment"></span>
<a name="l00049"></a>00049 <span class="comment">                /** The size of an internal computational block in the x</span>
<a name="l00050"></a>00050 <span class="comment">                 * direction. */</span>
<a name="l00051"></a><a class="code" href="classvoro_1_1voro__compute.html#a9db4da1c50c7777ea67a3340457772da">00051</a>                 <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1voro__compute.html#a9db4da1c50c7777ea67a3340457772da">boxx</a>;<span class="comment"></span>
<a name="l00052"></a>00052 <span class="comment">                /** The size of an internal computational block in the y</span>
<a name="l00053"></a>00053 <span class="comment">                 * direction. */</span>
<a name="l00054"></a><a class="code" href="classvoro_1_1voro__compute.html#a0612cf10336241a8b39f53c684b215f4">00054</a>                 <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1voro__compute.html#a0612cf10336241a8b39f53c684b215f4">boxy</a>;<span class="comment"></span>
<a name="l00055"></a>00055 <span class="comment">                /** The size of an internal computational block in the z</span>
<a name="l00056"></a>00056 <span class="comment">                 * direction. */</span>
<a name="l00057"></a><a class="code" href="classvoro_1_1voro__compute.html#a437a130ef80dc2e0939060abc5bcb462">00057</a>                 <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1voro__compute.html#a437a130ef80dc2e0939060abc5bcb462">boxz</a>;<span class="comment"></span>
<a name="l00058"></a>00058 <span class="comment">                /** The inverse box length in the x direction, set to</span>
<a name="l00059"></a>00059 <span class="comment">                 * nx/(bx-ax). */</span>
<a name="l00060"></a><a class="code" href="classvoro_1_1voro__compute.html#a4d1613a14697f4aff5b743d64db661b6">00060</a>                 <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1voro__compute.html#a4d1613a14697f4aff5b743d64db661b6">xsp</a>;<span class="comment"></span>
<a name="l00061"></a>00061 <span class="comment">                /** The inverse box length in the y direction, set to</span>
<a name="l00062"></a>00062 <span class="comment">                 * ny/(by-ay). */</span>
<a name="l00063"></a><a class="code" href="classvoro_1_1voro__compute.html#a384a2be3d85828fc0f7114d93096ed66">00063</a>                 <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1voro__compute.html#a384a2be3d85828fc0f7114d93096ed66">ysp</a>;<span class="comment"></span>
<a name="l00064"></a>00064 <span class="comment">                /** The inverse box length in the z direction, set to</span>
<a name="l00065"></a>00065 <span class="comment">                 * nz/(bz-az). */</span>
<a name="l00066"></a><a class="code" href="classvoro_1_1voro__compute.html#a0ac78232aa7234e0d17adf763c0f3c9f">00066</a>                 <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classvoro_1_1voro__compute.html#a0ac78232aa7234e0d17adf763c0f3c9f">zsp</a>;<span class="comment"></span>
<a name="l00067"></a>00067 <span class="comment">                /** The number of boxes in the x direction for the searching mask. */</span>
<a name="l00068"></a><a class="code" href="classvoro_1_1voro__compute.html#aaf168ea2924df41ece6ea2771aebbb72">00068</a>                 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classvoro_1_1voro__compute.html#aaf168ea2924df41ece6ea2771aebbb72">hx</a>;<span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">                /** The number of boxes in the y direction for the searching mask. */</span>
<a name="l00070"></a><a class="code" href="classvoro_1_1voro__compute.html#a8693c6f8e16e426f7b870a2b8bd4330d">00070</a>                 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classvoro_1_1voro__compute.html#a8693c6f8e16e426f7b870a2b8bd4330d">hy</a>;<span class="comment"></span>
<a name="l00071"></a>00071 <span class="comment">                /** The number of boxes in the z direction for the searching mask. */</span>
<a name="l00072"></a><a class="code" href="classvoro_1_1voro__compute.html#a9a64242973c903d26973de1fbb03f93f">00072</a>                 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classvoro_1_1voro__compute.html#a9a64242973c903d26973de1fbb03f93f">hz</a>;<span class="comment"></span>
<a name="l00073"></a>00073 <span class="comment">                /** A constant, set to the value of hx multiplied by hy, which</span>
<a name="l00074"></a>00074 <span class="comment">                 * is used in the routines which step through mask boxes in</span>
<a name="l00075"></a>00075 <span class="comment">                 * sequence. */</span>
<a name="l00076"></a><a class="code" href="classvoro_1_1voro__compute.html#a157da0cf7efcdfc256c04a430962360e">00076</a>                 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classvoro_1_1voro__compute.html#a157da0cf7efcdfc256c04a430962360e">hxy</a>;<span class="comment"></span>
<a name="l00077"></a>00077 <span class="comment">                /** A constant, set to the value of hx*hy*hz, which is used in</span>
<a name="l00078"></a>00078 <span class="comment">                 * the routines which step through mask boxes in sequence. */</span>
<a name="l00079"></a><a class="code" href="classvoro_1_1voro__compute.html#a8f5d72ef1dcd441d760d793ed0f935eb">00079</a>                 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classvoro_1_1voro__compute.html#a8f5d72ef1dcd441d760d793ed0f935eb">hxyz</a>;<span class="comment"></span>
<a name="l00080"></a>00080 <span class="comment">                /** The number of floating point entries to store for each</span>
<a name="l00081"></a>00081 <span class="comment">                 * particle. */</span>
<a name="l00082"></a><a class="code" href="classvoro_1_1voro__compute.html#ab3dbe9810de52793dfaf753b8504567c">00082</a>                 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classvoro_1_1voro__compute.html#ab3dbe9810de52793dfaf753b8504567c">ps</a>;<span class="comment"></span>
<a name="l00083"></a>00083 <span class="comment">                /** This array holds the numerical IDs of each particle in each</span>
<a name="l00084"></a>00084 <span class="comment">                 * computational box. */</span>
<a name="l00085"></a><a class="code" href="classvoro_1_1voro__compute.html#a9dd2372829ff4078615f994fc36a4c76">00085</a>                 <span class="keywordtype">int</span> **<a class="code" href="classvoro_1_1voro__compute.html#a9dd2372829ff4078615f994fc36a4c76">id</a>;<span class="comment"></span>
<a name="l00086"></a>00086 <span class="comment">                /** A two dimensional array holding particle positions. For the</span>
<a name="l00087"></a>00087 <span class="comment">                 * derived container_poly class, this also holds particle</span>
<a name="l00088"></a>00088 <span class="comment">                 * radii. */</span>
<a name="l00089"></a><a class="code" href="classvoro_1_1voro__compute.html#a57e2978b1a5fac350a35f7358502b2eb">00089</a>                 <span class="keywordtype">double</span> **<a class="code" href="classvoro_1_1voro__compute.html#a57e2978b1a5fac350a35f7358502b2eb">p</a>;<span class="comment"></span>
<a name="l00090"></a>00090 <span class="comment">                /** An array holding the number of particles within each</span>
<a name="l00091"></a>00091 <span class="comment">                 * computational box of the container. */</span>
<a name="l00092"></a><a class="code" href="classvoro_1_1voro__compute.html#a3f2f879cc43a586b602a2f2ce14294af">00092</a>                 <span class="keywordtype">int</span> *<a class="code" href="classvoro_1_1voro__compute.html#a3f2f879cc43a586b602a2f2ce14294af">co</a>;
<a name="l00093"></a>00093                 <a class="code" href="classvoro_1_1voro__compute.html" title="Template for carrying out Voronoi cell computations.">voro_compute</a>(c_class &amp;con_,<span class="keywordtype">int</span> hx_,<span class="keywordtype">int</span> hy_,<span class="keywordtype">int</span> hz_);<span class="comment"></span>
<a name="l00094"></a>00094 <span class="comment">                /** The class destructor frees the dynamically allocated memory</span>
<a name="l00095"></a>00095 <span class="comment">                 * for the mask and queue. */</span>
<a name="l00096"></a><a class="code" href="classvoro_1_1voro__compute.html#a7ce0dfe1b2ef4eb14832a82c01360e63">00096</a>                 <a class="code" href="classvoro_1_1voro__compute.html#a7ce0dfe1b2ef4eb14832a82c01360e63">~voro_compute</a>() {
<a name="l00097"></a>00097                         <span class="keyword">delete</span> [] qu;
<a name="l00098"></a>00098                         <span class="keyword">delete</span> [] mask;
<a name="l00099"></a>00099                 }
<a name="l00100"></a>00100                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00101"></a>00101                 <span class="keywordtype">bool</span> compute_cell(v_cell &amp;c,<span class="keywordtype">int</span> ijk,<span class="keywordtype">int</span> s,<span class="keywordtype">int</span> ci,<span class="keywordtype">int</span> cj,<span class="keywordtype">int</span> ck);
<a name="l00102"></a>00102                 <span class="keywordtype">void</span> find_voronoi_cell(<span class="keywordtype">double</span> x,<span class="keywordtype">double</span> y,<span class="keywordtype">double</span> z,<span class="keywordtype">int</span> ci,<span class="keywordtype">int</span> cj,<span class="keywordtype">int</span> ck,<span class="keywordtype">int</span> ijk,<a class="code" href="structvoro_1_1particle__record.html" title="Structure for holding information about a particle.">particle_record</a> &amp;w,<span class="keywordtype">double</span> &amp;mrs);
<a name="l00103"></a>00103         <span class="keyword">private</span>:<span class="comment"></span>
<a name="l00104"></a>00104 <span class="comment">                /** A constant set to boxx*boxx+boxy*boxy+boxz*boxz, which is</span>
<a name="l00105"></a>00105 <span class="comment">                 * frequently used in the computation. */</span>
<a name="l00106"></a>00106                 <span class="keyword">const</span> <span class="keywordtype">double</span> bxsq;<span class="comment"></span>
<a name="l00107"></a>00107 <span class="comment">                /** This sets the current value being used to mark tested blocks</span>
<a name="l00108"></a>00108 <span class="comment">                 * in the mask. */</span>
<a name="l00109"></a>00109                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mv;<span class="comment"></span>
<a name="l00110"></a>00110 <span class="comment">                /** The current size of the search list. */</span>
<a name="l00111"></a>00111                 <span class="keywordtype">int</span> qu_size;<span class="comment"></span>
<a name="l00112"></a>00112 <span class="comment">                /** A pointer to the array of worklists. */</span>
<a name="l00113"></a>00113                 <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *wl;<span class="comment"></span>
<a name="l00114"></a>00114 <span class="comment">                /** An pointer to the array holding the minimum distances</span>
<a name="l00115"></a>00115 <span class="comment">                 * associated with the worklists. */</span>
<a name="l00116"></a>00116                 <span class="keywordtype">double</span> *mrad;<span class="comment"></span>
<a name="l00117"></a>00117 <span class="comment">                /** This array is used during the cell computation to determine</span>
<a name="l00118"></a>00118 <span class="comment">                 * which blocks have been considered. */</span>
<a name="l00119"></a>00119                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *mask;<span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">                /** An array is used to store the queue of blocks to test</span>
<a name="l00121"></a>00121 <span class="comment">                 * during the Voronoi cell computation. */</span>
<a name="l00122"></a>00122                 <span class="keywordtype">int</span> *qu;<span class="comment"></span>
<a name="l00123"></a>00123 <span class="comment">                /** A pointer to the end of the queue array, used to determine</span>
<a name="l00124"></a>00124 <span class="comment">                 * when the queue is full. */</span>
<a name="l00125"></a>00125                 <span class="keywordtype">int</span> *qu_l;
<a name="l00126"></a>00126                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00127"></a>00127                 <span class="keywordtype">bool</span> corner_test(v_cell &amp;c,<span class="keywordtype">double</span> xl,<span class="keywordtype">double</span> yl,<span class="keywordtype">double</span> zl,<span class="keywordtype">double</span> xh,<span class="keywordtype">double</span> yh,<span class="keywordtype">double</span> zh);
<a name="l00128"></a>00128                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00129"></a>00129                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> edge_x_test(v_cell &amp;c,<span class="keywordtype">double</span> x0,<span class="keywordtype">double</span> yl,<span class="keywordtype">double</span> zl,<span class="keywordtype">double</span> x1,<span class="keywordtype">double</span> yh,<span class="keywordtype">double</span> zh);
<a name="l00130"></a>00130                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00131"></a>00131                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> edge_y_test(v_cell &amp;c,<span class="keywordtype">double</span> xl,<span class="keywordtype">double</span> y0,<span class="keywordtype">double</span> zl,<span class="keywordtype">double</span> xh,<span class="keywordtype">double</span> y1,<span class="keywordtype">double</span> zh);
<a name="l00132"></a>00132                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00133"></a>00133                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> edge_z_test(v_cell &amp;c,<span class="keywordtype">double</span> xl,<span class="keywordtype">double</span> yl,<span class="keywordtype">double</span> z0,<span class="keywordtype">double</span> xh,<span class="keywordtype">double</span> yh,<span class="keywordtype">double</span> z1);
<a name="l00134"></a>00134                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00135"></a>00135                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> face_x_test(v_cell &amp;c,<span class="keywordtype">double</span> xl,<span class="keywordtype">double</span> y0,<span class="keywordtype">double</span> z0,<span class="keywordtype">double</span> y1,<span class="keywordtype">double</span> z1);
<a name="l00136"></a>00136                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00137"></a>00137                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> face_y_test(v_cell &amp;c,<span class="keywordtype">double</span> x0,<span class="keywordtype">double</span> yl,<span class="keywordtype">double</span> z0,<span class="keywordtype">double</span> x1,<span class="keywordtype">double</span> z1);
<a name="l00138"></a>00138                 <span class="keyword">template</span>&lt;<span class="keyword">class</span> v_cell&gt;
<a name="l00139"></a>00139                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> face_z_test(v_cell &amp;c,<span class="keywordtype">double</span> x0,<span class="keywordtype">double</span> y0,<span class="keywordtype">double</span> zl,<span class="keywordtype">double</span> x1,<span class="keywordtype">double</span> y1);
<a name="l00140"></a>00140                 <span class="keywordtype">bool</span> compute_min_max_radius(<span class="keywordtype">int</span> di,<span class="keywordtype">int</span> dj,<span class="keywordtype">int</span> dk,<span class="keywordtype">double</span> fx,<span class="keywordtype">double</span> fy,<span class="keywordtype">double</span> fz,<span class="keywordtype">double</span> gx,<span class="keywordtype">double</span> gy,<span class="keywordtype">double</span> gz,<span class="keywordtype">double</span>&amp; crs,<span class="keywordtype">double</span> mrs);
<a name="l00141"></a>00141                 <span class="keywordtype">bool</span> compute_min_radius(<span class="keywordtype">int</span> di,<span class="keywordtype">int</span> dj,<span class="keywordtype">int</span> dk,<span class="keywordtype">double</span> fx,<span class="keywordtype">double</span> fy,<span class="keywordtype">double</span> fz,<span class="keywordtype">double</span> mrs);
<a name="l00142"></a>00142                 <span class="keyword">inline</span> <span class="keywordtype">void</span> add_to_mask(<span class="keywordtype">int</span> ei,<span class="keywordtype">int</span> ej,<span class="keywordtype">int</span> ek,<span class="keywordtype">int</span> *&amp;qu_e);
<a name="l00143"></a>00143                 <span class="keyword">inline</span> <span class="keywordtype">void</span> scan_bits_mask_add(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> q,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *mijk,<span class="keywordtype">int</span> ei,<span class="keywordtype">int</span> ej,<span class="keywordtype">int</span> ek,<span class="keywordtype">int</span> *&amp;qu_e);
<a name="l00144"></a>00144                 <span class="keyword">inline</span> <span class="keywordtype">void</span> scan_all(<span class="keywordtype">int</span> ijk,<span class="keywordtype">double</span> x,<span class="keywordtype">double</span> y,<span class="keywordtype">double</span> z,<span class="keywordtype">int</span> di,<span class="keywordtype">int</span> dj,<span class="keywordtype">int</span> dk,<a class="code" href="structvoro_1_1particle__record.html" title="Structure for holding information about a particle.">particle_record</a> &amp;w,<span class="keywordtype">double</span> &amp;mrs);
<a name="l00145"></a>00145                 <span class="keywordtype">void</span> add_list_memory(<span class="keywordtype">int</span>*&amp; qu_s,<span class="keywordtype">int</span>*&amp; qu_e);<span class="comment"></span>
<a name="l00146"></a>00146 <span class="comment">                /** Resets the mask in cases where the mask counter wraps</span>
<a name="l00147"></a>00147 <span class="comment">                 * around. */</span>
<a name="l00148"></a>00148                 <span class="keyword">inline</span> <span class="keywordtype">void</span> reset_mask() {
<a name="l00149"></a>00149                         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *mp(mask);mp&lt;mask+hxyz;mp++) *mp=0;
<a name="l00150"></a>00150                 }
<a name="l00151"></a>00151 };
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>


<hr class="footer"/><address class="footer"><small>
Generated on Tue Jan 17 2012 09:19:58 for Voro++ by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
